#!/usr/bin/env ruby
require 'gli'
require 'gitignores'

include GLI::App

program_desc Gitignores::SUMMARY
version Gitignores::VERSION
subcommand_option_handling :normal
arguments :strict
config_file '.gitignoresrc'

desc 'the directory in which to store the gitlab/gitignore repository'
default_value ENV['HOME']  + '/.gitignores'
flag ['local-repository'], :desc => 'path to the local github/gitignore repository',
                           :arg_name => 'path'

desc 'the remote github/gitignores repository'
long_desc %q(
change the remote github/gitignores repository to use a fork or an intranet 
repository behind the firewall
)
default_value 'https://github.com/github/gitignore.git'
flag ['remote-repository'], :desc => 'URL for the remote github/gitignore repository',
                            :arg_name => 'url'


desc 'appends a new gitignore snippet to the .gitignore in the current working directory'
long_desc %q(
Appends one or more snippets to the .gitignore file in the current working directory. 
Each snippet name is space separated e.g. "Java JetBrains". 
Use the list command to show possible values for snippet names.
)
arg 'snippet', :multiple
command :add do |c|
  c.desc 'include snippets for operating systems macOS, Windows, Linux'
  c.switch :os, :negatable => false
  c.action do |global_options,options,args|
    if (options[:os])
      args.concat ['macOS', 'Windows', 'Linux']
    end
    args.uniq!
    $gitignores.add(args)
  end
end


desc 'lists gitignore snippet names'
command :list do |c|
  c.action do |global_options,options,args|
    $gitignores.list
  end
end


desc 'dumps the given snippet(s) to standard out'
long_desc %q(
Dumps one or more snippets to standard out.
Each snippet name is space separated e.g. "Java JetBrains". 
Use the list command to show possible values for snippet names.
)
arg 'snippet', :multiple
command :show do |c|
  c.action do |global_options,options,args|
    $gitignores.show(args)
  end
end


desc 'pulls the latest from github/gitignore'
long_desc %q(
Pulls the latest version of github/gitignore to update the local repository of snippets 
)
command :update do |c|
  c.action do |global_options,options,args|
    $gitignores.update
  end
end


pre do |global,command,options,args|
  opts = {
    :local_repository => global['local-repository'],
    :remote_repository => global['remote-repository']
  }
  $gitignores = Gitignores::Gitignores.new(opts)
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
